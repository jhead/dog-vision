name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pr-preview-${{ github.event.number }}"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application for PR preview
        run: npm run build
        env:
          GITHUB_PR_NUMBER: ${{ github.event.number }}
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./out
          publish_branch: gh-pages
          destination_dir: pr-${{ github.event.number }}
          keep_files: true
          force_orphan: false

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const previewUrl = `https://${owner}.github.io/${repo}/pr-${prNumber}/`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: owner,
              repo: repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('ðŸš€ Preview deployment')
            );
            
            const commentBody = `ðŸš€ **Preview deployment** for this PR is ready!
            
            âœ… **Preview URL:** ${previewUrl}
            
            The preview will update automatically when you push new changes to this PR.`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: owner,
                repo: repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: owner,
                repo: repo,
                issue_number: prNumber,
                body: commentBody
              });
            }